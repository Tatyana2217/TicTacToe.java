package lesson4;

import java.util.Random;
import java.util.Scanner;

public class Hw4_TicTacToe_SIZE {


    static final int SIZE = 6;
    public static int block = 4;
    static final char DOT_EMPTY = '•';
    static final char DOT_HUMAN = 'X';
    static final char DOT_AI = '0';

    static final char HEADER_FIRST_SYMBOL = '♥';
    static final String EMPTY = " ";

    static final char[][] MAP = new char[SIZE][SIZE];
    static final Scanner in = new Scanner(System.in);
    static final Random random = new Random();

    static int turnsCount;

    public Hw4_TicTacToe_SIZE() {
    }


    public static void main(String[] args) {


        turnGame();
    }


    public static void turnGame() {
        // инициализация поля
        initMap();
        // печать поля в консоль
        printMAP();
        // игра
        playGame();

    }

    private static void initMap() {

        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                MAP[i][j] = DOT_EMPTY;

            }
        }
    }

    private static void printMAP() {
        // печать заголовка
        printHeaderMap();

        // печать поля
        printBodyMap();
    }


    private static void printHeaderMap() {
        System.out.print(HEADER_FIRST_SYMBOL + EMPTY);

        for (int i = 0; i < SIZE; i++) {
            printMapNumber(i);
        }
        System.out.println();

    }

    private static void printMapNumber(int i) {
        System.out.print(i + 1 + EMPTY);
    }

    private static void printBodyMap() {
        for (int i = 0; i < SIZE; i++) {
            printMapNumber(i);
            for (int j = 0; j < SIZE; j++) {
                System.out.print(MAP[i][j] + EMPTY);

            }
            System.out.println();
        }
    }

    private static void playGame() {
        turnsCount = 0;

        while (true) {
            humanTurn();
            printMAP();
            checkEnd(DOT_HUMAN);

            turnAI();
            printMAP();
            checkEnd(DOT_AI);


        }
    }


    private static void humanTurn() {
        int rowNumber;
        int columnNumber;
        boolean isInputValue = true;

        System.out.println("\nХод человека! Введите номера строки и столбца");
        do {
            rowNumber = -1;
            columnNumber = -1;
            isInputValue = true;


            System.out.print("Строка: ");
            if (in.hasNextInt()) {
                rowNumber = in.nextInt() - 1;
            } else {
                processingIncorrectInput();
                isInputValue = false;
                continue;

            }

            System.out.print("Столбик: ");
            if (in.hasNextInt()) {
                columnNumber = in.nextInt() - 1;
            } else {
                processingIncorrectInput();
                isInputValue = false;

            }
        }
        while (!(isInputValue && isHumanTurnValid(rowNumber, columnNumber)));

        MAP[rowNumber][columnNumber] = DOT_HUMAN;

    }

    private static void processingIncorrectInput() {
        in.nextLine();
        System.out.println("Ошибка ввода! Введите число в диапазоне размера игрового поля!");
    }

    private static boolean isHumanTurnValid(int rowNumber, int columnNumber) {
        if (!isNumbersValid(rowNumber, columnNumber)) {
            System.out.println("\n Проверьте значение строки и столбца");
            return false;
        } else if (!isCellOccupancy(rowNumber, columnNumber)) {
            System.out.println("\n Вы выбрали занятую ячейку");
            return false;
        }
        return true;
    }

    private static boolean isNumbersValid(int rowNumber, int columnNumber) {

        return !(rowNumber >= SIZE || rowNumber < 0 || columnNumber >= SIZE || columnNumber < 0);
    }

    private static boolean isCellOccupancy(int rowNumber, int columnNumber) {
        return MAP[rowNumber][columnNumber] == DOT_EMPTY;
    }

    private static void checkEnd(char symbol) {
        if (checkWin(symbol)) {
            if (symbol == DOT_HUMAN) {
                System.out.println("Ура! Вы победили!");
            } else {
                System.out.println("Восстание близко..ИИ победил..");
            }
            System.exit(0);
        } else if (isMapFull()) {
            System.out.println("Ничья!");
            System.exit(0);

        }

    }

        private static boolean isMapFull () {
            return ++turnsCount == SIZE * SIZE;
        }

        static boolean checkWin ( char symbol){
            for (int k = 0; k < SIZE - block + 1; k++) {
                for (int m = 0; m < SIZE - block + 1; m++) {
                    if (checkDiagonal(symbol,k,m) || checkLines(symbol,k,m)) return true;
                }
            }
            return false;
        }

        private static boolean checkDiagonal(char symbol, int offSetX,int offSetY){
            boolean toRight, toLeft;

            toRight = true;
            toLeft = true;

            for (int i = 0; i < block; i++) {
                toRight &= (MAP[i+offSetX][i+offSetY] == symbol);
                toLeft &= (MAP[block - 1 - i+offSetX][i+offSetY] == symbol);

            }
            if (toRight || toLeft) return true;

            return false;
        }

        private static boolean checkLines(char symbol, int offSetX, int offSetY){
            boolean cols, rows;
            for (int k = offSetX; k < block+offSetY; k++) {
                cols = true;
                rows = true;
                for (int m = offSetY; m < block+offSetY; m++) {
                    cols &= (MAP[k][m]) == symbol;
                    rows &= (MAP)[m][k] == symbol;
                }
                if (cols || rows) return true;

            }
            return false;
        }

        private static void turnAI () {
            int rowNumber;
            int columnNumber;

            System.out.println("\n Ход компьютера");

            do {
                rowNumber = random.nextInt(SIZE);
                columnNumber = random.nextInt(SIZE);

            } while (!isCellOccupancy(rowNumber, columnNumber));
            MAP[rowNumber][columnNumber] = DOT_AI;

        }
    }



